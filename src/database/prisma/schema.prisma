// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// run: npx prisma migrate dev --name "brief commit text"

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model Question {
  id            String    @id @default(uuid())
  etag          String    @default(uuid())
  createdAt     DateTime  @default(now())
  createdBy     String
  updatedAt     DateTime  @updatedAt
  updatedBy     String
  prefix        String?
  metric        String?
  subject       String?
  publicity     Publicity @default(private)
  isListed      Boolean   @default(false)
  isVotingOpen  Boolean   @default(false)
  creator       User      @relation("CreatedQuestions", fields: [createdBy], references: [id])
  tags          Tag[]
  answers       Answer[]
  favoritedBy   User[]    @relation("FavoriteQuestions")
}

model Answer {
  id            String    @id @default(uuid())
  etag          String    @default(uuid())
  createdAt     DateTime  @default(now())
  createdBy     String
  updatedAt     DateTime  @updatedAt
  updatedBy     String
  text          String?
  publicity     Publicity @default(private)
  tags          Tag[]
  imageUrl      String?
  questions     Question[]
}

model Tag {
  id        String    @id /// lowercase e.g. "dungeonsanddragons"
  etag      String    @default(uuid())
  createdAt DateTime  @default(now())
  createdBy String
  updatedAt DateTime  @updatedAt
  updatedBy String
  display   String    @unique /// mixed-case e.g. "DungeonsAndDragons"
  answers   Answer[]
  questions Question[]
}

model User {
  id                  String      @id @default(uuid())
  etag                String      @default(uuid())
  createdAt           DateTime    @default(now())
  createdBy           String
  updatedAt           DateTime    @updatedAt
  updatedBy           String
  name                String
  email               String?     @unique
  auth0UserId         String?     @unique
  createdQuestions    Question[]  @relation("CreatedQuestions")
  favoriteQuestions   Question[]  @relation("FavoriteQuestions")
}

enum Publicity {
  private
  public
  anonymous
}
